package main

import (
	"errors"
	"fmt"
	"html/template"
	"path/filepath"
	"runtime"
	_ "runtime/pprof"

	"github.com/markbates/goth"
	"github.com/markbates/goth/gothic"
	"github.com/markbates/goth/providers/google"
	"github.com/sirupsen/logrus"

	echoSwagger "github.com/swaggo/echo-swagger"

	_ "github.com/adhtanjung/go-starter/docs" // docs is generated by Swag CLI, you have to import it.

	"log"
	"net/http"
	"os"
	"time"

	"github.com/gorilla/websocket"
	"github.com/joho/godotenv"

	"github.com/adhtanjung/go-starter/domain"
	"github.com/adhtanjung/go-starter/pkg/cas"
	"github.com/adhtanjung/go-starter/pkg/database"
	middlewares "github.com/adhtanjung/go-starter/pkg/middlewares"
	"github.com/adhtanjung/go-starter/pkg/renderer"
	"github.com/adhtanjung/go-starter/pkg/token"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/spf13/viper"

	// "go.elastic.co/apm/module/apmechov4/v2"

	_authHttpDelivery "github.com/adhtanjung/go-starter/auth/delivery/http"
	_authUcase "github.com/adhtanjung/go-starter/auth/usecase"

	// _refreshTokenHttpDelivery "github.com/adhtanjung/go-starter/auth/delivery/http"
	// _casbinRepo "github.com/adhtanjung/go-starter/casbin/repository/mysql"
	_roleHttpDelivery "github.com/adhtanjung/go-starter/role/delivery/http"
	_roleRepo "github.com/adhtanjung/go-starter/role/repository/mysql"
	_roleUcase "github.com/adhtanjung/go-starter/role/usecase"
	_userHttpDelivery "github.com/adhtanjung/go-starter/user/delivery/http"
	_userRepo "github.com/adhtanjung/go-starter/user/repository/mysql"
	_userUcase "github.com/adhtanjung/go-starter/user/usecase"
	_userRoleRepo "github.com/adhtanjung/go-starter/user_role/repository/mysql"
)

func init() {

	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	viper.SetConfigFile(`config.json`)
	err = viper.ReadInConfig()
	if err != nil {
		panic(err)
	}

	if viper.GetBool(`debug`) {
		log.Println("Service RUN on DEBUG mode")
	}
}

var (
	upgrader = websocket.Upgrader{}
)

type M map[string]interface{}

// @title go starter api
// @version 1.0
// @description This is a go starter api wow.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:9090
// @BasePath /
func main() {
	runtime.GOMAXPROCS(4)

	gugel := google.New(viper.GetString("google.client_id"), viper.GetString("google.client_secret"), "http://localhost:9090/auth/callback?provider=google")
	gugel.SetPrompt("consent")

	goth.UseProviders(
		gugel,
	)
	dbConn, err := database.NewDBConnection()

	if err != nil {
		log.Fatal("Failed to connect to database. \n", err)
		os.Exit(2)
	}
	if err := dbConn.AutoMigrate(&domain.User{}, &domain.UserFilepath{}, &domain.UserRole{}); err != nil {
		log.Println("migration error", err)
	}

	config := middleware.JWTConfig{
		ParseTokenFunc: func(auth string, c echo.Context) (interface{}, error) {

			token, err := token.ParseJWT(auth)
			if err != nil {
				return nil, err
			}
			if !token.Valid {
				return nil, errors.New("invalid token")
			}
			return token, nil
		},
	}
	configRefreshToken := middleware.JWTConfig{
		ParseTokenFunc: func(auth string, c echo.Context) (interface{}, error) {

			token, err := token.ParseRefreshToken(auth)
			if err != nil {
				return nil, err
			}
			if !token.Valid {
				return nil, errors.New("invalid token")
			}
			return token, nil
		},
	}

	e := echo.New()

	dir, err := os.Getwd()
	if err != nil {
		logrus.Error(err)
	}

	e.Renderer = renderer.NewRenderer(filepath.Join(dir, "/web/*.html"), true)

	e.Static("/", "public")
	e.Use(middleware.Logger())
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins:     []string{"*"},
		AllowHeaders:     []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept},
		AllowCredentials: true,
	}))
	e.Use(middleware.Recover())
	e.Use(middlewares.MiddlewareLogging)
	e.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{
		LogURI:       true,
		LogStatus:    true,
		LogMethod:    true,
		LogRemoteIP:  true,
		LogUserAgent: true,
		LogError:     true,
		LogRoutePath: true,
		LogValuesFunc: func(c echo.Context, values middleware.RequestLoggerValues) error {
			logrus.WithFields(logrus.Fields{
				"method":     values.Method,
				"URI":        values.URI,
				"status":     values.Status,
				"error":      values.Error,
				"user_agent": values.UserAgent,
				"remote_ip":  values.RemoteIP,
				"route_path": values.RoutePath,
			}).Info("request")
			return nil
		},
	}))
	// e.Use(apmechov4.Middleware())

	url := echoSwagger.URL("http://localhost:9090/swagger/doc.json") //The url pointing to API definition
	e.GET("/swagger/*", echoSwagger.EchoWrapHandler(url))

	// Add a healthcheck endpoint
	e.GET("/healthcheck", func(c echo.Context) error {
		return c.String(http.StatusOK, "healthy")
	})
	e.GET("/", func(c echo.Context) error {
		c.SetCookie(&http.Cookie{
			Name:  "test_cookie",
			Value: "woy",
		})
		return c.HTML(http.StatusOK, `
			<h1>Welcome to Softworx API!</h1>
		`)
	})

	e.GET("/auth/callback", func(c echo.Context) error {

		user, err := gothic.CompleteUserAuth(c.Response(), c.Request())

		if err != nil {
			fmt.Fprintln(c.Response(), err)
			return c.String(http.StatusInternalServerError, err.Error())
		}

		t, _ := template.ParseFiles("./web/oauth_success.html")
		t.Execute(c.Response(), user)
		return c.Render(http.StatusOK, "callback", t)

	})
	e.GET("/auth", func(c echo.Context) error {
		gothic.BeginAuthHandler(c.Response(), c.Request())
		return nil
	})

	refreshToken := e.Group("/refresh-token")
	refreshToken.Use(middleware.JWTWithConfig(configRefreshToken))
	refreshToken.Use(middlewares.TokenToContext(viper.GetString("secret.refresh_jwt")))

	apiGroup := e.Group("/api")
	v1 := apiGroup.Group("/v1")
	v1.Use(middleware.JWTWithConfig(config))

	enforcer, en := cas.InitCasbin()

	v1.Use(enforcer.Enforce)
	v1.Use(middlewares.TokenToContext(viper.GetString("secret.jwt")))
	userRepo := _userRepo.NewMysqlUserRepository(dbConn, en)
	userFilepathRepo := _userRepo.NewMysqlUserFilepathRepository(dbConn)
	roleRepo := _roleRepo.NewMysqlRoleRepository(dbConn)
	userRoleRepo := _userRoleRepo.NewMysqlUserRoleRepository(dbConn)
	// casbinRepo := _casbinRepo.NewMysqlCasbinRepository(en)

	timeoutContext := time.Duration(viper.GetInt("context.timeout")) * time.Second
	// us := _userUcase.NewUserUsecase(userRepo, roleRepo, userRoleRepo, casbinRepo, userFilepathRepo, timeoutContext)
	us := _userUcase.NewUserUsecase(userRepo, roleRepo, userRoleRepo, userFilepathRepo, timeoutContext)
	ru := _roleUcase.NewRoleUsecase(roleRepo, timeoutContext)
	auth := _authUcase.NewAuthUsecase(userRepo, userRoleRepo, roleRepo, timeoutContext)

	_authHttpDelivery.NewRefreshTokenHandler(refreshToken, us)
	_authHttpDelivery.NewAuthHandler(e, auth)
	_userHttpDelivery.NewUserHandler(v1, us)
	_roleHttpDelivery.NewRoleHandler(v1, ru)

	e.HTTPErrorHandler = middlewares.ErrorHandler
	lock := make(chan error)
	time.Sleep(1 * time.Millisecond)
	middlewares.MakeLogEntry(nil).Warning("application started without ssl/tls enabled")
	go func(lock chan error) { lock <- e.Start(viper.GetString("server.address")) }(lock)
	errN := <-lock
	if errN != nil {
		middlewares.MakeLogEntry(nil).Panic("failed to start application")
	}
	// if err := s.ListenAndServeTLS("server.crt", "server.key"); err != http.ErrServerClosed {
	// 	e.Logger.Fatal(err)
	// }
	// log.Fatal(e.Start(viper.GetString("server.address")))
}
